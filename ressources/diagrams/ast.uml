@startuml
skinparam classAttributeIconSize 0
skinparam groupInheritance 3
hide empty methods
hide empty attributes
scale 1000 height
left to right direction

AST *- ASTNode

abstract class ASTNode {
  +{abstract} display(): void
  +{abstract} compile(): void
}

class Block {
  -operations: list<ASTNode>
  +addOp(ASTNode): void
}

class Include {
  -libName: string
}

ASTNode <|-- Value
class Value {
  -value: type_t
  -type: Type
}

ASTNode <|-- Variable
class Variable {
  -id: string
  -type: type
}

Assignement o-- Variable
Assignement o-- Value
class Assignement {
  -variable: Variable
  -value: Value
}

Declaration o-- Variable
class Declaration {
  -variable: Variable
}

FunctionCall o-- ASTNode
class FunctionCall {
  -functionName: string
  -params: list<ASTNode>
}

Statement *-- Block
class Statement {
  block: Block
}

Statement <|-- Function
Function o-- Variable
class Function {
  -name: string
  -params: list<Variable>
  -returnType: Type
}

Statement <|-- If
If o-- ASTNode
class If {
  -condition: ASTNode
}

Statement <|-- For
For *-- ASTNode
class For {
  -var: string
  -begin: ASTNode
  -end: ASTNode
  -step: ASTNode
}

Statement <|-- While
If o-- ASTNode
class While {
  -condition: ASTNode
}

ASTNode <|-- BinaryOperation
BinaryOperation *-- ASTNode
class BinaryOperation {
  -left: ASTNode
  -right: ASTNode
}

BinaryOperation <|-- AddOP
BinaryOperation <|-- MnsOP
BinaryOperation <|-- TmsOP
BinaryOperation <|-- DivOP
BinaryOperation <|-- AndOP
BinaryOperation <|-- OrOP
BinaryOperation <|-- XorOP
BinaryOperation <|-- EqlOP
BinaryOperation <|-- SupOP
BinaryOperation <|-- InfOP
BinaryOperation <|-- SeqOP
BinaryOperation <|-- IeqOP

ASTNode <|-- NotOP
NotOP *-- ASTNode
class NotOP {
  -param: ASTNode
}

ASTNode <|-- Statement
ASTNode <|-- Include
ASTNode <|-- Block
ASTNode <|-- Assignement
ASTNode <|-- Declaration
ASTNode <|-- FunctionCall
ASTNode <|-- Print
ASTNode <|-- Read
@enduml
